// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStore.Infrastructure.Data;

#nullable disable

namespace eStore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250302125138_AddOrderTable")]
    partial class AddOrderTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eStore.Domain.Entity.Batch", b =>
                {
                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<string>("BatchDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("BatchNumber");

                    b.HasIndex("Product_Id");

                    b.ToTable("Batches");

                    b.HasData(
                        new
                        {
                            BatchNumber = 10200,
                            BatchDetails = "Some details goes here",
                            Product_Id = 1
                        });
                });

            modelBuilder.Entity("eStore.Domain.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eStore.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "NVIDIA",
                            ImageURL = "",
                            LongDescription = "The NVIDIA GeForce RTX 4090 delivers unparalleled gaming performance with 24GB GDDR6X memory, ray tracing, and AI-powered DLSS 3.",
                            Name = "NVIDIA GeForce RTX 4090",
                            Price = 1599.99,
                            PublishDate = new DateOnly(2025, 2, 27),
                            Rating = 5,
                            ShortDescription = "Flagship gaming GPU with 24GB GDDR6X memory.",
                            Stock = 20
                        },
                        new
                        {
                            Id = 2,
                            Brand = "AMD",
                            ImageURL = "",
                            LongDescription = "The AMD Radeon RX 7900 XTX features RDNA 3 architecture, 24GB GDDR6 memory, and advanced ray tracing for next-gen gaming performance.",
                            Name = "AMD Radeon RX 7900 XTX",
                            Price = 999.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 28),
                            Rating = 5,
                            ShortDescription = "Powerful RDNA 3 gaming GPU with 24GB GDDR6.",
                            Stock = 35
                        },
                        new
                        {
                            Id = 3,
                            Brand = "NVIDIA",
                            ImageURL = "",
                            LongDescription = "Experience smooth 4K gaming with the NVIDIA GeForce RTX 4080 Super, featuring 16GB GDDR6X, ray tracing, and AI-driven DLSS technology.",
                            Name = "NVIDIA GeForce RTX 4080 Super",
                            Price = 1199.99,
                            PublishDate = new DateOnly(2025, 2, 26),
                            Rating = 5,
                            ShortDescription = "High-end gaming GPU with 16GB GDDR6X memory.",
                            Stock = 40
                        },
                        new
                        {
                            Id = 4,
                            Brand = "AMD",
                            ImageURL = "",
                            LongDescription = "The AMD Radeon RX 7800 XT offers 16GB of GDDR6 memory, ray tracing, and FSR 3 for high-performance gaming at 1440p and beyond.",
                            Name = "AMD Radeon RX 7800 XT",
                            Price = 549.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 25),
                            Rating = 4,
                            ShortDescription = "Mid-range RDNA 3 gaming GPU with 16GB GDDR6.",
                            Stock = 50
                        },
                        new
                        {
                            Id = 5,
                            Brand = "NVIDIA",
                            ImageURL = "",
                            LongDescription = "The NVIDIA GeForce RTX 4070 Ti delivers excellent performance with 12GB GDDR6X memory, DLSS 3, and real-time ray tracing capabilities.",
                            Name = "NVIDIA GeForce RTX 4070 Ti",
                            Price = 799.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 24),
                            Rating = 4,
                            ShortDescription = "1440p and 4K gaming GPU with 12GB GDDR6X.",
                            Stock = 60
                        },
                        new
                        {
                            Id = 6,
                            Brand = "AMD",
                            ImageURL = "",
                            LongDescription = "The AMD Radeon RX 7700 XT features 12GB GDDR6, RDNA 3 technology, and high FPS performance in modern titles at 1440p resolution.",
                            Name = "AMD Radeon RX 7700 XT",
                            Price = 449.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 23),
                            Rating = 4,
                            ShortDescription = "1440p gaming GPU with 12GB GDDR6 memory.",
                            Stock = 70
                        },
                        new
                        {
                            Id = 7,
                            Brand = "NVIDIA",
                            ImageURL = "",
                            LongDescription = "The NVIDIA GeForce RTX 4060 Ti is an affordable yet powerful GPU, featuring 8GB GDDR6 memory, ray tracing, and DLSS 3 for smooth gameplay.",
                            Name = "NVIDIA GeForce RTX 4060 Ti",
                            Price = 399.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 22),
                            Rating = 4,
                            ShortDescription = "Budget-friendly RTX GPU with 8GB GDDR6.",
                            Stock = 100
                        },
                        new
                        {
                            Id = 8,
                            Brand = "AMD",
                            ImageURL = "",
                            LongDescription = "The AMD Radeon RX 7600 offers 8GB GDDR6, FSR 3 support, and solid 1080p gaming performance for budget-conscious gamers.",
                            Name = "AMD Radeon RX 7600",
                            Price = 299.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 21),
                            Rating = 4,
                            ShortDescription = "Affordable RDNA 3 gaming GPU with 8GB GDDR6.",
                            Stock = 120
                        },
                        new
                        {
                            Id = 9,
                            Brand = "NVIDIA",
                            ImageURL = "",
                            LongDescription = "The NVIDIA GeForce RTX 4050 offers great 1080p gaming performance with 6GB GDDR6 memory and DLSS 3.",
                            Name = "NVIDIA GeForce RTX 4050",
                            Price = 249.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 20),
                            Rating = 4,
                            ShortDescription = "Entry-level gaming GPU with 6GB GDDR6.",
                            Stock = 150
                        },
                        new
                        {
                            Id = 10,
                            Brand = "AMD",
                            ImageURL = "",
                            LongDescription = "The AMD Radeon RX 7500 is perfect for 1080p gaming with 6GB GDDR6 memory and RDNA 3 technology.",
                            Name = "AMD Radeon RX 7500",
                            Price = 219.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 19),
                            Rating = 4,
                            ShortDescription = "Budget-friendly GPU with 6GB GDDR6.",
                            Stock = 130
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Intel",
                            ImageURL = "",
                            LongDescription = "The Intel Arc A770 delivers competitive 1440p gaming performance with 16GB GDDR6 and XeSS upscaling.",
                            Name = "Intel Arc A770",
                            Price = 349.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 18),
                            Rating = 4,
                            ShortDescription = "Intel's high-end gaming GPU with 16GB GDDR6.",
                            Stock = 80
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Intel",
                            ImageURL = "",
                            LongDescription = "The Intel Arc A750 offers great 1080p and 1440p gaming with 8GB GDDR6 and Intel's XeSS upscaling.",
                            Name = "Intel Arc A750",
                            Price = 279.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 17),
                            Rating = 4,
                            ShortDescription = "Affordable Intel gaming GPU with 8GB GDDR6.",
                            Stock = 90
                        });
                });

            modelBuilder.Entity("eStore.Domain.Entity.TargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("TargetAudiences");
                });

            modelBuilder.Entity("eStore.Domain.Entity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eStore.Domain.Entity.Batch", b =>
                {
                    b.HasOne("eStore.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eStore.Domain.Entity.TargetAudience", b =>
                {
                    b.HasOne("eStore.Domain.Entity.Product", "Product")
                        .WithMany("TargetAudienceList")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eStore.Domain.Entity.Product", b =>
                {
                    b.Navigation("TargetAudienceList");
                });
#pragma warning restore 612, 618
        }
    }
}
