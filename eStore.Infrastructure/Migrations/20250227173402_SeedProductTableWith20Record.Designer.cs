// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStore.Infrastructure.Data;

#nullable disable

namespace eStore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227173402_SeedProductTableWith20Record")]
    partial class SeedProductTableWith20Record
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eStore.Domain.Entity.Batch", b =>
                {
                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<string>("BatchDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("BatchNumber");

                    b.HasIndex("Product_Id");

                    b.ToTable("Batches");

                    b.HasData(
                        new
                        {
                            BatchNumber = 10200,
                            BatchDetails = "Some details goes here",
                            Product_Id = 1
                        });
                });

            modelBuilder.Entity("eStore.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Brand = "SoundMagic",
                            ImageURL = "https://www.pexels.com/photo/black-wireless-headphones-1234567/",
                            LongDescription = "Experience immersive sound with these wireless Bluetooth headphones, featuring active noise cancellation and up to 20 hours of battery life.",
                            Name = "Wireless Bluetooth Headphones",
                            Price = 59.990000000000002,
                            PublishDate = new DateOnly(2025, 2, 15),
                            Rating = 4,
                            ShortDescription = "High-quality wireless headphones with noise cancellation.",
                            Stock = 150
                        },
                        new
                        {
                            Id = 13,
                            Brand = "FitLife",
                            ImageURL = "https://www.pexels.com/photo/smart-fitness-watch-2345678/",
                            LongDescription = "Stay on top of your health goals with this smart fitness watch, offering heart rate monitoring, GPS tracking, and customizable watch faces.",
                            Name = "Smart Fitness Watch",
                            Price = 129.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 16),
                            Rating = 5,
                            ShortDescription = "Track your fitness and health metrics with this smart watch.",
                            Stock = 200
                        },
                        new
                        {
                            Id = 14,
                            Brand = "ChargeUp",
                            ImageURL = "https://www.pexels.com/photo/portable-power-bank-3456789/",
                            LongDescription = "Keep your devices charged with this portable 10000mAh power bank, featuring dual USB ports and fast charging capabilities.",
                            Name = "Portable Power Bank",
                            Price = 25.989999999999998,
                            PublishDate = new DateOnly(2025, 2, 17),
                            Rating = 4,
                            ShortDescription = "Compact 10000mAh power bank for charging on the go.",
                            Stock = 300
                        },
                        new
                        {
                            Id = 15,
                            Brand = "ClickPro",
                            ImageURL = "https://www.pexels.com/photo/wireless-mouse-4567890/",
                            LongDescription = "Enhance your productivity with this ergonomic wireless mouse, offering adjustable DPI settings and a comfortable grip for extended use.",
                            Name = "Wireless Mouse",
                            Price = 19.989999999999998,
                            PublishDate = new DateOnly(2025, 2, 18),
                            Rating = 4,
                            ShortDescription = "Ergonomic wireless mouse with adjustable DPI settings.",
                            Stock = 250
                        },
                        new
                        {
                            Id = 16,
                            Brand = "HubMaster",
                            ImageURL = "https://www.pexels.com/photo/usb-c-hub-adapter-5678901/",
                            LongDescription = "Expand your device's connectivity with this USB-C hub adapter, featuring HDMI output, USB 3.0 ports, and SD card reader.",
                            Name = "USB-C Hub Adapter",
                            Price = 34.990000000000002,
                            PublishDate = new DateOnly(2025, 2, 19),
                            Rating = 4,
                            ShortDescription = "Multi-port USB-C hub with HDMI and USB 3.0 ports.",
                            Stock = 180
                        },
                        new
                        {
                            Id = 17,
                            Brand = "ChargeEase",
                            ImageURL = "https://www.pexels.com/photo/wireless-charging-pad-6789012/",
                            LongDescription = "Conveniently charge your devices with this fast wireless charging pad, compatible with all Qi-enabled smartphones and accessories.",
                            Name = "Wireless Charging Pad",
                            Price = 29.989999999999998,
                            PublishDate = new DateOnly(2025, 2, 20),
                            Rating = 4,
                            ShortDescription = "Fast wireless charging pad compatible with Qi-enabled devices.",
                            Stock = 220
                        },
                        new
                        {
                            Id = 18,
                            Brand = "SoundBuds",
                            ImageURL = "https://www.pexels.com/photo/noise-canceling-earbuds-7890123/",
                            LongDescription = "Enjoy your music without distractions with these in-ear noise-canceling earbuds, delivering high-fidelity sound and a comfortable fit.",
                            Name = "Noise-Canceling Earbuds",
                            Price = 79.989999999999995,
                            PublishDate = new DateOnly(2025, 2, 21),
                            Rating = 5,
                            ShortDescription = "In-ear noise-canceling earbuds with high-fidelity sound.",
                            Stock = 170
                        },
                        new
                        {
                            Id = 19,
                            Brand = "VisionTech",
                            ImageURL = "https://www.pexels.com/photo/4k-ultra-hd-monitor-8901234/",
                            LongDescription = "Upgrade your viewing experience with this 27-inch 4K Ultra HD monitor, featuring HDR support and multiple connectivity options.",
                            Name = "4K Ultra HD Monitor",
                            Price = 399.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 22),
                            Rating = 5,
                            ShortDescription = "27-inch 4K Ultra HD monitor with HDR support.",
                            Stock = 80
                        },
                        new
                        {
                            Id = 20,
                            Brand = "GameMaster",
                            ImageURL = "https://www.pexels.com/photo/mechanical-gaming-keyboard-9012345/",
                            LongDescription = "Enhance your gaming setup with this RGB backlit mechanical keyboard, offering customizable keys and durable switches for responsive gameplay.",
                            Name = "Mechanical Gaming Keyboard",
                            Price = 89.989999999999995,
                            PublishDate = new DateOnly(2025, 2, 23),
                            Rating = 5,
                            ShortDescription = "RGB backlit mechanical keyboard with customizable keys.",
                            Stock = 130
                        },
                        new
                        {
                            Id = 21,
                            Brand = "DataVault",
                            ImageURL = "https://www.pexels.com/photo/external-ssd-9123456/",
                            LongDescription = "Store and access your data quickly with this portable 1TB external SSD, featuring high-speed USB-C connectivity and shock resistance.",
                            Name = "External Solid State Drive",
                            Price = 129.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 24),
                            Rating = 5,
                            ShortDescription = "Portable 1TB external SSD with high-speed data transfer.",
                            Stock = 140
                        },
                        new
                        {
                            Id = 22,
                            Brand = "BrightEase",
                            ImageURL = "https://www.pexels.com/photo/smart-led-desk-lamp-9234567/",
                            LongDescription = "Improve your workspace with this smart LED desk lamp, featuring adjustable brightness, color temperature settings, and touch controls.",
                            Name = "Smart LED Desk Lamp",
                            Price = 39.990000000000002,
                            PublishDate = new DateOnly(2025, 2, 25),
                            Rating = 4,
                            ShortDescription = "Adjustable LED desk lamp with touch controls.",
                            Stock = 200
                        },
                        new
                        {
                            Id = 23,
                            Brand = "SecureCam",
                            ImageURL = "https://www.pexels.com/photo/smart-home-security-camera-9345678/",
                            LongDescription = "Keep your home safe with this smart security camera, offering 1080p resolution, motion detection, and night vision capabilities.",
                            Name = "Smart Home Security Camera",
                            Price = 89.989999999999995,
                            PublishDate = new DateOnly(2025, 2, 26),
                            Rating = 4,
                            ShortDescription = "Wi-Fi enabled smart security camera with night vision.",
                            Stock = 120
                        },
                        new
                        {
                            Id = 24,
                            Brand = "GamePro",
                            ImageURL = "https://www.pexels.com/photo/gaming-mouse-pad-9456789/",
                            LongDescription = "Upgrade your gaming setup with this large RGB gaming mouse pad, featuring customizable lighting effects and an anti-slip rubber base.",
                            Name = "Gaming Mouse Pad",
                            Price = 29.989999999999998,
                            PublishDate = new DateOnly(2025, 2, 27),
                            Rating = 4,
                            ShortDescription = "Large RGB gaming mouse pad with anti-slip rubber base.",
                            Stock = 160
                        },
                        new
                        {
                            Id = 25,
                            Brand = "OralCare",
                            ImageURL = "https://www.pexels.com/photo/electric-toothbrush-9567890/",
                            LongDescription = "Maintain your oral hygiene with this rechargeable electric toothbrush, offering multiple brushing modes and long battery life.",
                            Name = "Electric Toothbrush",
                            Price = 49.990000000000002,
                            PublishDate = new DateOnly(2025, 2, 28),
                            Rating = 5,
                            ShortDescription = "Rechargeable electric toothbrush with multiple modes.",
                            Stock = 180
                        },
                        new
                        {
                            Id = 26,
                            Brand = "Memoria",
                            ImageURL = "https://www.pexels.com/photo/smart-digital-photo-frame-9678901/",
                            LongDescription = "Display your favorite memories with this smart digital photo frame, featuring cloud storage, slideshow modes, and touch screen controls.",
                            Name = "Smart Digital Photo Frame",
                            Price = 99.989999999999995,
                            PublishDate = new DateOnly(2025, 3, 1),
                            Rating = 5,
                            ShortDescription = "Wi-Fi enabled digital photo frame with cloud storage support.",
                            Stock = 90
                        },
                        new
                        {
                            Id = 27,
                            Brand = "ThermoSmart",
                            ImageURL = "https://www.pexels.com/photo/smart-thermos-bottle-9789012/",
                            LongDescription = "Keep your beverages at the perfect temperature with this smart thermos bottle, featuring an LED temperature display and stainless steel insulation.",
                            Name = "Smart Thermos Bottle",
                            Price = 34.990000000000002,
                            PublishDate = new DateOnly(2025, 3, 2),
                            Rating = 4,
                            ShortDescription = "Temperature-sensing smart thermos bottle with LED display.",
                            Stock = 150
                        },
                        new
                        {
                            Id = 28,
                            Brand = "VisionMini",
                            ImageURL = "https://www.pexels.com/photo/mini-portable-projector-9890123/",
                            LongDescription = "Enjoy a cinematic experience anywhere with this mini portable projector, featuring 1080p HD resolution, built-in speakers, and multiple input options.",
                            Name = "Mini Portable Projector",
                            Price = 149.99000000000001,
                            PublishDate = new DateOnly(2025, 3, 3),
                            Rating = 5,
                            ShortDescription = "Compact mini projector with 1080p HD resolution.",
                            Stock = 80
                        });
                });

            modelBuilder.Entity("eStore.Domain.Entity.TargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("TargetAudiences");
                });

            modelBuilder.Entity("eStore.Domain.Entity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eStore.Domain.Entity.Batch", b =>
                {
                    b.HasOne("eStore.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eStore.Domain.Entity.TargetAudience", b =>
                {
                    b.HasOne("eStore.Domain.Entity.Product", "Product")
                        .WithMany("TargetAudienceList")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eStore.Domain.Entity.Product", b =>
                {
                    b.Navigation("TargetAudienceList");
                });
#pragma warning restore 612, 618
        }
    }
}
