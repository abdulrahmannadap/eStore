// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStore.Infrastructure.Data;

#nullable disable

namespace eStore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227174324_SeedProductTableWith8Record")]
    partial class SeedProductTableWith8Record
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eStore.Domain.Entity.Batch", b =>
                {
                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<string>("BatchDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("BatchNumber");

                    b.HasIndex("Product_Id");

                    b.ToTable("Batches");

                    b.HasData(
                        new
                        {
                            BatchNumber = 10200,
                            BatchDetails = "Some details goes here",
                            Product_Id = 1
                        });
                });

            modelBuilder.Entity("eStore.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Apple",
                            ImageURL = "https://www.ldlc-pro.be/images/digiphone13mini512red.jpg",
                            LongDescription = "The Apple iPhone 13 mini features a 5.4-inch Super Retina XDR display, A15 Bionic chip, and 512GB of storage, all in a compact design.",
                            Name = "Apple iPhone 13 mini 512GB (PRODUCT)RED",
                            Price = 999.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 15),
                            Rating = 5,
                            ShortDescription = "Compact smartphone with 512GB storage.",
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Brand = "NVIDIA",
                            ImageURL = "https://www.bestbuy.com/images/rtx4090.jpg",
                            LongDescription = "The NVIDIA GeForce RTX 4090 offers 24GB of GDDR6X memory, delivering exceptional performance for gaming and professional applications.",
                            Name = "NVIDIA GeForce RTX 4090 24GB GDDR6X Graphics Card",
                            Price = 1499.99,
                            PublishDate = new DateOnly(2025, 2, 16),
                            Rating = 5,
                            ShortDescription = "High-performance graphics card for gaming and design.",
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Crucial",
                            ImageURL = "https://www.cclonline.com/images/crucial8gbddr3.jpg",
                            LongDescription = "The Crucial 8GB DDR3 RAM module operates at 1600MHz, providing stable and efficient performance for various computing needs.",
                            Name = "Crucial 8GB (1x 8GB) 1600MHz DDR3 RAM",
                            Price = 39.990000000000002,
                            PublishDate = new DateOnly(2025, 2, 17),
                            Rating = 4,
                            ShortDescription = "Reliable 8GB DDR3 RAM module.",
                            Stock = 100
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Seagate",
                            ImageURL = "https://www.seagate.com/images/barracudaqlcssd.jpg",
                            LongDescription = "The Seagate BarraCuda QLC SSD offers 1TB of storage capacity with fast read and write speeds, ideal for everyday computing and gaming.",
                            Name = "Seagate BarraCuda QLC SSD 1TB",
                            Price = 109.98999999999999,
                            PublishDate = new DateOnly(2025, 2, 18),
                            Rating = 4,
                            ShortDescription = "1TB QLC SSD for high-capacity storage.",
                            Stock = 75
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Logisys",
                            ImageURL = "https://www.bhphotovideo.com/images/logisys550wpsu.jpg",
                            LongDescription = "The Logisys 550W PSU provides reliable power delivery for desktop computers, featuring a 120mm ball-bearing fan for efficient cooling.",
                            Name = "Logisys 550W Power Supply Unit (Black)",
                            Price = 49.990000000000002,
                            PublishDate = new DateOnly(2025, 2, 19),
                            Rating = 3,
                            ShortDescription = "550W power supply unit for desktop PCs.",
                            Stock = 60
                        },
                        new
                        {
                            Id = 6,
                            Brand = "AMD",
                            ImageURL = "https://www.amd.com/images/ryzen95900x.jpg",
                            LongDescription = "The AMD Ryzen 9 5900X offers 12 cores and 24 threads, delivering exceptional performance for gaming and content creation.",
                            Name = "AMD Ryzen 9 5900X 12-core Processor",
                            Price = 549.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 20),
                            Rating = 5,
                            ShortDescription = "High-performance 12-core desktop processor.",
                            Stock = 40
                        },
                        new
                        {
                            Id = 7,
                            Brand = "ASUS",
                            ImageURL = "https://www.asus.com/images/rogstrixb550f.jpg",
                            LongDescription = "The ASUS ROG Strix B550-F Gaming motherboard supports AMD AM4 processors, featuring PCIe 4.0, dual M.2 slots, and robust power delivery.",
                            Name = "ASUS ROG Strix B550-F Gaming Motherboard",
                            Price = 199.99000000000001,
                            PublishDate = new DateOnly(2025, 2, 21),
                            Rating = 4,
                            ShortDescription = "ATX gaming motherboard with PCIe 4.0 support.",
                            Stock = 45
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Samsung",
                            ImageURL = "https://www.samsung.com/images/970evoplus500gb.jpg",
                            LongDescription = "The Samsung 970 EVO Plus offers 500GB of storage with exceptional read and write speeds, enhancing system performance for various applications.",
                            Name = "Samsung 970 EVO Plus 500GB NVMe SSD",
                            Price = 89.989999999999995,
                            PublishDate = new DateOnly(2025, 2, 22),
                            Rating = 5,
                            ShortDescription = "High-speed 500GB NVMe solid-state drive.",
                            Stock = 80
                        });
                });

            modelBuilder.Entity("eStore.Domain.Entity.TargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("TargetAudiences");
                });

            modelBuilder.Entity("eStore.Domain.Entity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eStore.Domain.Entity.Batch", b =>
                {
                    b.HasOne("eStore.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eStore.Domain.Entity.TargetAudience", b =>
                {
                    b.HasOne("eStore.Domain.Entity.Product", "Product")
                        .WithMany("TargetAudienceList")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eStore.Domain.Entity.Product", b =>
                {
                    b.Navigation("TargetAudienceList");
                });
#pragma warning restore 612, 618
        }
    }
}
