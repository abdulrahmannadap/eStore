@inject SignInManager<ApplicationUser> SignInManager;
@inject UserManager<ApplicationUser> UserManager;
@{
    var role = string.Empty;
    if (SignInManager.IsSignedIn(User))
    {
        var user = await UserManager.GetUserAsync(User);
        role = (await UserManager.GetRolesAsync(user!)).FirstOrDefault();
    }
}
<ul class="navbar-nav align-items-center">
    @if (!SignInManager.IsSignedIn(User))
    {
        <li class="nav-item me-2">
            <a class="btn btn-outline-danger btn-sm shadow-sm rounded d-flex align-items-center" asp-action="Register" asp-controller="Account">
                <i class="bi bi-person-plus me-1"></i> Register
            </a>
        </li>
        <li class="nav-item">
            <a class="btn btn-outline-danger btn-sm shadow-sm rounded d-flex align-items-center" asp-action="Login" asp-controller="Account">
                <i class="bi bi-box-arrow-in-right me-1"></i> Login
            </a>
        </li>
    }
    else
    {
        if (role! == "customer")
        {
            <li class="nav-item me-3">
                <a class="nav-link d-flex align-items-center" href="@Url.Action("MyOrderDetail", "Home")">
                    <i class="bi bi-box-seam me-1"></i>Orders
                </a>
            </li>
        }
      
   
        <li class="nav-item me-3">
            <span class="nav-link fw-semibold d-flex align-items-center">
                <i class="bi bi-person-circle me-1"></i> @UserManager.GetUserName(User) 
            </span>
        </li>

        <li class="nav-item">
            <a class="btn btn-outline-danger btn-sm shadow-sm rounded d-flex align-items-center" asp-action="Logout" asp-controller="Account">
                <i class="bi bi-box-arrow-right me-1"></i> Logout
            </a>
        </li>
    }
</ul>



